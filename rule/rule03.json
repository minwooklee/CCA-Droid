{
	"slicingSignatures": {
		"<javax.crypto.spec.PBEKeySpec: void <init>(char[])>": [0],
        "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int)>": [0],
        "<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>": [0],
        "<javax.crypto.spec.DESKeySpec: void <init>(byte[])>": [0],
		"<javax.crypto.spec.DESKeySpec: void <init>(byte[],int)>": [0],
        "<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>": [0],
		"<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>": [0],
		"<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>": [0],
		"<javax.crypto.Cipher: void init(int,java.security.Key)>": [1],
		"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)>": [1],
		"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>": [1],
		"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>": [1],
		"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>": [1],
		"<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>": [1]
	},
	"insecureRule": {
		"ruleID": "3-1",
		"description": "This slice uses a hardcoded key",
		"targetConstant": ".*"
	},
	"secureRule": {
		"ruleID": "3-2",
		"description": "This slice uses a random key",
		"targetSignatures": [
			"<java.lang.System: long currentTimeMillis()>",
			"<java.util.Random: int nextInt()>",
			"<java.util.Random: int nextInt(int)>",
			"<java.util.Random: long nextLong()>",
			"<java.util.Random: void nextBytes(byte[])>",
			"<java.security.SecureRandom int next(int)>",
			"<java.security.SecureRandom: int nextInt()>",
			"<java.security.SecureRandom: java.util.stream.IntStream ints()>",
			"<java.security.SecureRandom: void nextBytes(byte[])>",
			"<javax.crypto.KeyAgreement: byte[] generateSecret()>"
		]
	}
}